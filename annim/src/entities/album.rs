//! `SeaORM` Entity, @generated by sea-orm-codegen 1.0.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, async_graphql :: SimpleObject)]
#[sea_orm(table_name = "album")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    #[sea_orm(unique)]
    pub album_id: Uuid,
    pub title: String,
    pub edition: Option<String>,
    pub catalog: Option<String>,
    pub artist: String,
    pub release_year: i32,
    pub release_month: Option<i16>,
    pub release_day: Option<i16>,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(has_many = "super::disc::Entity")]
    Disc,
    #[sea_orm(has_many = "super::track::Entity")]
    Track,
}

impl Related<super::disc::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Disc.def()
    }
}

impl Related<super::track::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Track.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelatedEntity)]
pub enum RelatedEntity {
    #[sea_orm(entity = "super::disc::Entity")]
    Disc,
    #[sea_orm(entity = "super::track::Entity")]
    Track,
}
