use axum::response::{IntoResponse, IntoResponseParts};

pub(crate) enum Either<L, R> {
    Left(L),
    Right(R),
}

impl<L, R> IntoResponseParts for Either<L, R>
where
    L: IntoResponseParts,
    R: IntoResponseParts,
{
    type Error = Either<L::Error, R::Error>;

    fn into_response_parts(
        self,
        res: axum::response::ResponseParts,
    ) -> Result<axum::response::ResponseParts, Self::Error> {
        match self {
            Either::Left(l) => l.into_response_parts(res).map_err(|e| Either::Left(e)),
            Either::Right(r) => r.into_response_parts(res).map_err(|e| Either::Right(e)),
        }
    }
}

impl<L, R> IntoResponse for Either<L, R>
where
    L: IntoResponse,
    R: IntoResponse,
{
    fn into_response(self) -> axum::response::Response {
        match self {
            Either::Left(l) => l.into_response(),
            Either::Right(r) => r.into_response(),
        }
    }
}

/// Calculate output size of opus file
pub fn opus_file_size(milliseconds: u64, bit_rate: u16, frame_size: u8) -> u64 {
    const OGG_PREFIX_PAGES_SIZE: u64 = 0x2f + 0x31a;
    const FIXED_OGG_PAGE_HEADER_SIZE: u64 = 26 + 1;
    const MAX_DELAY: u64 = 1000;

    let total_opus_packets = milliseconds.div_ceil(frame_size as u64);
    let total_ogg_pages = total_opus_packets.div_ceil(MAX_DELAY / frame_size as u64);

    let opus_packet_size = bit_rate as u64 * frame_size as u64 / 8;
    let opus_packages_per_ogg_page = opus_packet_size.div_ceil(0xff);

    OGG_PREFIX_PAGES_SIZE
        + total_ogg_pages * FIXED_OGG_PAGE_HEADER_SIZE
        + opus_packages_per_ogg_page * total_opus_packets
        + total_opus_packets * opus_packet_size
}

#[cfg(test)]
mod tests {
    use crate::utils::opus_file_size;

    #[test]
    fn test_sparkle_opus_size() {
        // data generated by transcoding [220617][MVC-0064] Animelo Summer Live 2022 -Sparkle- テーマソング
        assert_eq!(opus_file_size(248745, 64, 60), 2006233);
        assert_eq!(opus_file_size(248745, 128, 60), 4004605);
        assert_eq!(opus_file_size(248745, 192, 60), 6002977);
        assert_eq!(opus_file_size(248745, 256, 60), 8001349);
    }

    #[test]
    fn test_sakuranotoki_opus_size() {
        assert_eq!(opus_file_size(80361372 * 1000 / 44100, 64, 20), 14719255);
    }
}
