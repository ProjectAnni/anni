schema {
  query: MetadataQuery
  mutation: MetadataMutation
}
input AddAlbumInput {
  albumId: UUID
  title: String!
  edition: String
  catalog: String
  artist: String!
  year: Int!
  month: Int
  day: Int
  extra: JSON
  discs: [CreateAlbumDiscInput!]!
}

type Album {
  id: ID!
  """
  Unique UUID of the album.
  """
  albumId: UUID!
  """
  Title of the album.
  """
  title: String!
  """
  Optional edition of the album.
  """
  edition: String
  """
  Optional catalog number of the album.
  """
  catalog: String
  """
  Artist of the album.
  """
  artist: String!
  """
  Release year of the album.
  """
  year: Int!
  """
  Optional release month of the album.
  """
  month: Int
  """
  Optional release day of the album.
  """
  day: Int
  tags: [Tag!]!
  """
  Creation time of this album in the database. (UTC)
  """
  createdAt: DateTime!
  """
  Last update time of this album in the database. (UTC)
  """
  updatedAt: DateTime!
  """
  Organize level of the album.
  """
  level: MetadataOrganizeLevel!
  """
  Extra metadata of the album.
  """
  extra: JSON
  """
  Discs of the album.
  """
  discs: [Disc!]!
}

type AlbumConnection {
  """
  Information to aid in pagination.
  """
  pageInfo: PageInfo!
  """
  A list of edges.
  """
  edges: [AlbumEdge!]!
  """
  A list of nodes.
  """
  nodes: [Album!]!
}

"""
An edge in a connection.
"""
type AlbumEdge {
  """
  The item at the end of the edge
  """
  node: Album!
  """
  A cursor for use in pagination
  """
  cursor: String!
}

"""
List albums by conditions.
"""
input AlbumsBy {
  """
  List albums by conditions.
  """
  albumIds: [UUID!]
  """
  List albums by conditions.
  """
  recentlyCreated: Int
  """
  List albums by conditions.
  """
  recentlyUpdated: Int
  """
  List albums by conditions.
  """
  recentlyReleased: Int
  """
  List albums by conditions.
  """
  keyword: String
  """
  List albums by conditions.
  """
  organizeLevel: MetadataOrganizeLevel
}

input CreateAlbumDiscInput {
  title: String
  catalog: String
  artist: String
  tracks: [CreateAlbumTrackInput!]!
}

input CreateAlbumTrackInput {
  title: String!
  artist: String!
  type: TrackType!
}

"""
Implement the DateTime<Utc> scalar

The input/output is a string in RFC3339 format.
"""
scalar DateTime

type Disc {
  id: ID!
  index: Int!
  title: String
  catalog: String
  artist: String
  tags: [Tag!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  tracks: [Track!]!
}

"""
A scalar that can represent any JSON value.
"""
scalar JSON

input MetadataIDInput {
  album: ID
  disc: ID
  track: ID
}

type MetadataMutation {
  """
  Add the metatada of a full album to annim.
  """
  addAlbum(input: AddAlbumInput!): Album!
  """
  Update basic album information.
  Use this method to update basic album information such as title, artist and others.

  If you need to update disc or track information, use [updateDiscInfo] or [updateTrackInfo].
  If you need to change the structure of the album, use [replaceAlbumDiscs] or [replaceDiscTracks].
  """
  updateAlbumInfo(input: UpdateAlbumInfoInput!): Album
  """
  Update basic disc information.
  """
  updateDiscInfo(input: UpdateDiscInfoInput!): Disc
  """
  Update basic track information.
  """
  updateTrackInfo(input: UpdateTrackInfoInput!): Track
  """
  Replace discs of an album.

  This method only works if the organize level of the album is INITIAL.
  """
  replaceAlbumDiscs(input: ReplaceAlbumDiscsInput!): Album
  """
  Replace tracks of a disc.

  This method only works if the organize level of the album is INITIAL.
  """
  replaceDiscTracks(input: ReplaceDiscTracksInput!): Disc
  """
  Update organize level of an album.

  The organize level should only increase. However, it is not enforced by the server.
  """
  updateOrganizeLevel(input: UpdateAlbumOrganizeLevelInput!): Album
  """
  Add a new tag `type:name` to the database.
  """
  addTag(name: String!, type: TagType!): Tag!
  updateTagRelation(tagId: ID!, parentId: ID!, remove: Boolean): TagRelation
  """
  Update tags of an album, disc or track.
  """
  updateMetadataTags(input: MetadataIDInput!, tags: [ID!]!): Album!
}

enum MetadataOrganizeLevel {
  """
  Level 1: Initial organization. Principal errors may exist, such as mismatches in the number of album tracks.

  Organizer behavior: The metadata should be completed as soon as possible and upgraded to the PARTIAL level.
  Client behavior: Can only use cached data in a purely offline state, in other scenarios **must** query in real-time.
  """
  INITIAL
  """
  Level 2: Partially completed. Principal information (such as the number of discs, number of tracks) has been confirmed as correct and will not change.

  Organizer behavior: Can remain at this level for a long time, but the metadata should be completed and confirmed by reviewers as soon as possible, then upgraded to the CONFIRMED level.
  Client behavior: Can cache this metadata, but should check for changes every hour.
  """
  PARTIAL
  """
  Level 3: Reviewed. The metadata has been reviewed and confirmed by some organizers, and is relatively reliable.

  Organizer behavior: Can be changed, but be aware that the client may take a longer time to refresh.
  Client behavior: Can cache this metadata for a long period of time.
  """
  REVIEWED
  """
  Level 4: Completed. The metadata has been fully organized and will not change.

  Organizer behavior: Cannot be changed.
  Client behavior: Can cache this metadata permanently without considering any changes.
  """
  FINISHED
}

type MetadataQuery {
  album(albumId: UUID!): Album
  albums(by: AlbumsBy!, after: String, first: Int): AlbumConnection!
  tag(tagName: String!, tagType: TagType): [Tag!]!
}

"""
Information about pagination in a connection
"""
type PageInfo {
  """
  When paginating backwards, are there more items?
  """
  hasPreviousPage: Boolean!
  """
  When paginating forwards, are there more items?
  """
  hasNextPage: Boolean!
  """
  When paginating backwards, the cursor to continue.
  """
  startCursor: String
  """
  When paginating forwards, the cursor to continue.
  """
  endCursor: String
}

input ReplaceAlbumDiscsInput {
  id: ID!
  discs: [CreateAlbumDiscInput!]!
}

input ReplaceDiscTracksInput {
  id: ID!
  tracks: [CreateAlbumTrackInput!]!
}

type Tag {
  id: ID!
  name: String!
  type: TagType!
  createdAt: DateTime!
  updatedAt: DateTime!
  includes: [Tag!]!
  includedBy: [Tag!]!
}

type TagRelation {
  id: ID!
  tag: Tag!
  parent: Tag!
}

enum TagType {
  ARTIST
  GROUP
  ANIMATION
  RADIO
  SERIES
  PROJECT
  GAME
  ORGANIZATION
  OTHERS
}

type Track {
  id: ID!
  index: Int!
  title: String!
  artist: String!
  type: TrackType!
  artists: JSON
  tags: [Tag!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

enum TrackType {
  NORMAL
  INSTRUMENTAL
  ABSOLUTE
  DRAMA
  RADIO
  VOCAL
  UNKNOWN
}

"""
A UUID is a unique 128-bit number, stored as 16 octets. UUIDs are parsed as
Strings within GraphQL. UUIDs are used to assign unique identifiers to
entities without requiring a central allocating authority.

# References

* [Wikipedia: Universally Unique Identifier](http://en.wikipedia.org/wiki/Universally_unique_identifier)
* [RFC4122: A Universally Unique IDentifier (UUID) URN Namespace](http://tools.ietf.org/html/rfc4122)
"""
scalar UUID

input UpdateAlbumInfoInput {
  id: ID!
  title: String
  edition: UpdateString
  catalog: UpdateString
  artist: String
  year: Int
  month: UpdateI16
  day: UpdateI16
  extra: UpdateJson
}

input UpdateAlbumOrganizeLevelInput {
  id: ID!
  level: MetadataOrganizeLevel!
}

input UpdateDiscInfoInput {
  id: ID!
  title: UpdateString
  catalog: UpdateString
  artist: UpdateString
}

input UpdateI16 {
  value: Int
}

input UpdateJson {
  value: JSON
}

input UpdateString {
  value: String
}

input UpdateTrackInfoInput {
  id: ID!
  title: String
  artist: String
  type: TrackType
}

